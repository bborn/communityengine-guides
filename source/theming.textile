h2. Theming

This guide covers the use of extensions to customize the appearance of your CommunityEngine store. In this guide you will learn:

* How to use an extension to customize the look of your store
* How to to override CommunityEngine's stylesheets and add your own
* How to override CommunityEngine's templates
* How to insert content into CommunityEngine's templates using hooks

endprologue.

h3. Theme extensions

Themes in CommunityEngine are implemented as extensions. Please refer to the "extensions guide":extensions.html for full details on using CommunityEngine extensions. This guide is concerned with features of extensions specific to altering the appearance of your store.


h4. Creating a theme extension

Theme extensions have particular features, so CommunityEngine provides a specific generator.
To generate a theme extension, run the following command:

<shell>
script/generate theme my_theme
</shell>

The generator takes a theme name (no other options), and produces its results in
+vendor/extensions/theme_my_theme+, i.e. gives the theme name a +theme_+ prefix.
It produces a number of directories and files which are likely to be useful
for a new theme, and omits the extension files which aren't useful, e.g. the +db+ directory.

IMPORTANT. The generator copies in the +screen.css+ file compiled from the Less files in the core. Developers can modify this directly if they want. If you want to use Less, you will have to set up the recompilation yourself. We expect to provide more support in the next release.



h4. Installing an existing extension

If the extension you want to install is available in a Git repository you can install it easily as follows:

<shell>
script/extension install git://github.com/username/your-theme.git
</shell>


h4. Load order

Each extension loaded by CommunityEngine will override the views and stylesheets of those that preceed so you will need to configure their load order. 
This was covered in the "customization overview":customization_overview.html#extensionloadorder.
You will want to load your extension after, or instead of, the +:theme_default+ that comes 
with CommunityEngine. The exact order may depend on the other extensions you are using. 




h3. Stylesheets

This part of the guide explains how override CommunityEngine's default stylesheets or add your own.

CommunityEngine's core uses "Less CSS":http://lesscss.org/ for its CSS. Less makes your CSS more maintainable with features such as variables and mixins while still supporting standard CSS syntax. 

INFO. You do not need to use or even understand Less CSS in order to create a CommunityEngine theme.  Less CSS support is provided strictly as a convenience to developers who find it useful.

However, compiling the Less files into CSS in development mode proves too expensive for most 
users, so the current release does not contain direct Less support in extensions. Each new theme 
extension has a copy of the compiled CSS file at +public/stylesheets/screen.css+ instead,
in case it is needed for minor changes. 

If you want to use Less, see below for further details of CommunityEngine's setup.

h4. Options with custom stylesheets

You can modify or extend the standard +screen.css+ file, but the following options
support more maintainable working.

h5. Using preferences to specify stylesheets to load

By default CommunityEngine will only load +public/stylesheets/screen.css+ into the main layout. Rather than 
override the layout template you can load your custom stylesheet by setting the +:stylesheets+
option in an extension initializer, e.g. add the following to +config/initializers/my_theme.rb+ 
inside your theme. This would load +screen.css+ first followed by +my_theme.css+.

<ruby>
CommunityEngine::Config.set(:stylesheets => 'screen,my_theme')
</ruby>


h5. Customizing the contents of the head tag

To have full control over the stylesheets used in your theme, as well as JavaScripts, you can override the template +app/views/shared/_head.html.erb+ which includes all the contents of the head tag. See "Customizing Templates":#customizingtemplates

If you just need to add your own content to what the head already contains, you can use the theme hook +:head+. See "Hooks":#hooks for details.



h4. Less CSS 

h5. Development options

By default, there is no automatic support for recompilation of Less files. Developers can still
use Less files in their extension, and can manually trigger recompilation with the following 
+rake+ task. 

<shell>
rake CommunityEngine:dev:less
</shell>


h5. How the core uses Less

Stylesheets are created in +app/stylesheets+ with the extension ".less" and are then compiled into ".css" files automatically.
CommunityEngine has a number of stylesheets for the front end of the site which are all compiled to the single file +screen.css+ to improve site performance. These files are as follows:

<plain>
  _buttons.less
  _cart.less
  _checkout_progress.less
  _checkout.less
  _colors.less
  _forms.less
  _layout.less
  _messages.less
  _mixins.less
  _navigation.less
  _prices.less
  _product_details.less
  _product_lists.less
  _registration.less
  _reset.less
  _typography.less
  screen.less
</plain>

The "_" file prefix denotes a partial stylesheet. These are all included into the main stylesheet +screen.less+ on compilation using the +@import+ directive:

<shell>
  @import "_reset";
</shell>

To override any of these stylesheets, create a file of the same name within your extension's +app/stylesheets+ directory. For example, if you just wanted to change some of the colours used in the default theme you would just create a copy of +_colors.less+ in your +app/stylesheets+ directory.



h3. Images and other assets

h4. Adding your own images, JavaScripts and other assets

Any static asset your theme requires should be placed in +THEME_EXTENSION_DIR/public+. These will be copied into +RAILS_ROOT/public+ when you start the application.

h4. Using a Custom Logo

If you're overriding the main application layout (+CommunityEngine_application.html.erb+) you can place your logo image in there. However it is possible  to change the logo just by changing a preference value,
e.g. the following in an initializer:

<ruby>
CommunityEngine::Config.set(:logo => '/images/my_logo_.png')
</ruby>

h4. Configuring your theme's image sizes

CommunityEngine uses "paperclip":http://github.com/thoughtbot/paperclip to manage image
attachments in various sizes. 
You can change the sizes or add new formats by including a line like this in 
your theme's +FOO_extension.rb+ file:

<shell>
Image.attachment_definitions[:attachment][:styles] = {
	:thumb => '60x80', 
	:mini => '100x100', 
	:small => '175x175>', 
	:product => '300x300>', 
	:large => '720x720>'
	}
</shell>


h3. Hooks

Hooks are a way of inserting your own content into pre-defined parts of CommunityEngine's default templates without having to make your own copy of those templates in your extension. 

Multiple extensions can modify the same hook: the changes are applied cumulatively based on extension load order.

h4. Available hooks

Hooks are available to let you add content after product lists, within sidebars and other 
useful places. There is a full list of "available hooks":hooks.html.

h4. Using hooks

Most hooks are defined with blocks so they span a region of the template, allowing content
to be replaced or removed as well as added to.

In your theme directory you should find the file +my_theme_hooks.rb+.  Within this file you can specify which content should be inserted into which hooks using the following 4 methods:

* insert_before
* insert_after
* replace
* remove

h5. Inserting and replacing content

Supply a hook name followed by any arguments you'd use with +render+

<shell>
  insert_before :homepage_products, :text => "<h1>Welcome!</h1>"

  insert_after :homepage_products, 'shared/offers' # render partial

  replace :taxon_sidebar_navigation, 'shared/my_sidebar'
</shell>

h5. Using a block

The block should return an erb string to be evaluated. It has access to any methods or instance variables available in the view. Certain local variables are also available.

<shell>
  # adding a link below product details:
  insert_after :product_description do
    '<p><%= link_to("Back to products", products_path) %></p>'
  end

  # adding a new tab to the admin navigation
  insert_after :admin_tabs do
    "<%= tab(:taxonomies) %>"
  end
</shell>

h5. Removing a hook's content

<shell>
  remove :homepage_products
</shell>



h3. Customizing templates

h4. Overriding CommunityEngine default views

To override any of of CommunityEngine's default views, including those for the admin interface, simply create a file with the same filename in your theme's +app/views+ directory.

For example, to override the main layout, create the file +THEME_EXTENSION_DIR/app/views/layouts/CommunityEngine_application.html.erb+

h4. Using hooks in your templates

Since themes are just CommunityEngine extensions, one may be loaded after another, the modifications they make to the site's appearance being combined based on their load order.  If you anticipate your theme being extended by other themes you should make sure your templates maintain the standard hooks where possible so subsequently loaded extensions can make use of them. You may also define new hooks using the +hook+ helper like so:

<erb>
  <%= hook :my_hook_name %>

  # or with block
  <% hook :my_hook_name do %>
    <p>Default content</p>
  <% end %>
</erb>

If you want to make locals available when using your hook, supply them as a hash:

<erb>
  <% local_var = 'value' %>
  <% hook :my_hook_name, :local_var => local_var do %>
    <p>Default content</p>
  <% end %>
</erb>

If your theme adds new hooks these should be documented in your theme's README.

h3. Further Reading

"Steph Powell":http://github.com/stephp has produced an excellent 
"tutorial on using hooks":http://blog.endpoint.com/2010/01/rails-ecommerce-CommunityEngine-hooks-tutorial.html
in the "Endpoint blog":http://blog.endpoint.com/, and a related post discussing the 
"design of the theme mechanisms":http://blog.endpoint.com/2010/01/rails-ecommerce-CommunityEngine-hooks-comments.html.
Steph has written several extensions for CommunityEngine, many of which are on 
"GitHub":http://github.com/stephp.
