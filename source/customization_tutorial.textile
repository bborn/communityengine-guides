h2. Tutorial: A Customization Extension

This guide contains a tutorial for the development of an extension to customize the appearance of the standard CommunityEngine installation. After reading this guide you should learn:

* How to build a "theme" extension to customize the look of your store
* How to use a "site" extension to integrate your customization
* How to include custom stylesheets, javascript, or images
* How to add in new functionality with other extensions
* How to deactivate an extension

endprologue.

h3. Preliminaries

We assume that you are running CommunityEngine from an installed gem, and have created a new project
using the +CommunityEngine+ command. This is the easiest mode to start with. Configure the database(s)
as you wish and run the server.

The new project will already have a site extension created by default, located in
+vendor/extensions/site+. It should contain a few skeleton files already. We will create 
a new theme to hold the changed views templatew

NOTE. When any files in an extension's +public/*+ directories are modified, such as CSS or JS files, a server restart is required to copy these files over to the main app +public/+ directory. Kill and rerun +script/server+, or if using Apache + Passenger, use +touch tmp/restart.txt+, etc. 


h3. Creating a Theme Extension

First, run the following to create a theme extension by the name of 'my_theme'.

<shell>
script/generate theme my_theme
</shell>

This command will create several files in the +vendor/extensions/my_theme+ directory. The 
contents will look similar to a generic rails application - it's the subset of files needed
in extension, restricted to the files that are useful for view changes.

Now change into this new directory. 


h3. Add a Custom CSS Stylesheet

New themes contain a copy of the core CommunityEngine style file (called +screen.css+). 
You can edit this if you wish, or add some new files. 
This part of the tutorial explains how to add a custom CSS stylesheet to change the 
look of your site.

h4. Create the custom stylesheet

Create a file named +public/stylesheets/my_theme.css+. Edit this + to contain the following:
<code>
body {
  background: #99CC99;
}
</code>

h4. Add the stylesheet to the default layout

Now you'll tell CommunityEngine to include the custom stylesheet in the default layout by 
changing the stylesheets preference.

Put this code in an initializer, e.g. in +config/initializers/my_theme.rb+.
<ruby>
CommunityEngine::Config.set(:stylesheets => 'screen,my_theme')
</ruby>

h4. Results

After the server has restarted, refresh your browser to verify the background colour changes have taken effect.

!images/customize1.png(Custom CSS Part 1)!

h4. Another Iteration

Complete the following steps to perform another iteration of style changes:

Apply the following patch on +my_theme.css+ and restart the server.

<code>
  body {
    background: #99CC99; 
  }
+ body.two-col div#wrapper {
+   background-image: none;
+   background: #FFF;
+   -moz-border-radius: 10px;
+   -webkit-border-radius: 10px;
+ }
</code>


View the results:

!images/customize2.png(Custom CSS Part 2)!

h3. Using Custom Logos

The following describes how to use a custom logo on your site.

h4. Override the default logo path

Change the default path CommunityEngine uses for the logo image file by adding the following line to 
an initializer (see above).

<code>
CommunityEngine::Config.set(:logo => '/images/logo.png')
</code>

h4. Upload the image

Next, create a +public/images+ directory with the following command:

<shell>
mkdir public/images
</shell>

Then, retrieve "this image":images/logo.png and save it to your SITE_EXTENSION_DIR/public/images/ directory, then restart.
<shell>
wget http://CommunityEnginecommerce.com/guides/images/logo.png
mv logo.png SITE_EXTENSION_DIR/public/images/logo.png
</shell>


h4. Results

View the results:

!images/customize3.png(Custom Logo)!

h3. Customizing the Layout

If you need greater layout customization than changing the logo and stylesheets allow, then override the CommunityEngine layout template.

To demonstrate we're just going to add a "Hello World" message to the layout.

h4. Copy the layout template

We'll copy the existing layout template to our site extension before we customize it.

First, complete the following command to make a new directory: 

<shell>
mkdir SITE_EXTENSION_DIR/app/views/layouts/
</shell>

Copy the CommunityEngine gem's +CommunityEngine_application.html.erb+ layout file to your extension +app/views/layouts/+ directory.

<shell>
cp GEM_ROOT/app/views/layouts/CommunityEngine_application.html.erb SITE_EXTENSION_DIR/app/views/layouts/
</shell>

h4. Edit the layout template

Edit the +SITE_EXTENSION_DIR/app/views/layouts/CommunityEngine_application.html.erb+ file to contain the following HTML between the opening +body+ tag and the first +div+ tag:
<code>
<h1>Hello World</h1>
</code>

h4. Results

Refresh the site in your browser, and see that there is now a "Hello World" message that wasn't there before.  Now go back and delete +&lt;h1&gt;Hello World&lt;/h1&gt;+ from the file you edited in the previous step, you won't need it for the rest of the tutorial.  

h3. Using Custom Javascript

This final step of the tutorial describes how to add custom javascript to your site by modifying the head partial template file.

h4. Copy the head partial

We'll copy the existing head partial template to our site extension before we customize it.

First, complete the following command to make a new directory: 

<shell>
mkdir SITE_EXTENSION_DIR/app/views/shared/
</shell>

h5. CommunityEngine Application Installation

If you are running CommunityEngine as an application, copy the CommunityEngine +_head.html.erb+ partial to your extension +app/views/shared/+ directory.
 
<shell>
cp CommunityEngine_ROOT/app/views/shared/_head.html.erb /
  SITE_EXTENSION_DIR/app/views/shared/
</shell>

h5. Gem Installation

If you are running CommunityEngine as a gem, copy the CommunityEngine gem +_head.html.erb+ partial to your extension +app/views/shared/+ directory.

<shell>
cp GEM_ROOT/app/views/shared/_head.html.erb /
  SITE_EXTENSION_DIR/app/views/shared/
</shell>

h4. Edit the head partial

Apply the following patch to +SITE_EXTENSION_DIR/app/views/shared/_head.html.erb+ to include +site.js+ on all of your application pages. The rails helper will be used to consolidate and cache the three javascript files into one file to be included on all pages.
 
<code>
- <%= javascript_include_tag 'jquery-1.3.2.min',
-   'jquery.validate.min.js' :cache => 'jquery-and-plugins' %>
+ <%= javascript_include_tag 'jquery-1.3.2.min',
+   'jquery.validate.min.js', 'site.js'
+   :cache => 'jquery-and-site' %>
</code>

h4. Create the Javascript

WARNING. CommunityEngine endorses the use of jQuery rather than the Rails convention of Prototype. Using Prototype will most likely cause jQuery conflicts.

Create a new directory to house the javascript in the SITE_EXTENSION/public/javascripts/ directory.

<shell>
mkdir public/javascripts/
vi public/javascripts/site.js
</shell>

Add the following code to +site.js+ and restart:

<code>
$(function() {
  alert('hi');
})
</code>

h4. Results

Refresh your browser to see the new alert message on page load:

!images/customize4.png(Custom Javascript Part 1)!

h4. Another Iteration

To complete another iteration of javascript changes, replace +site.js+ with the following code:

<code>
var are_you_sure = function() {
   return confirm('Are you sure you
     would like to add this item to your cart?');
};
$(function() {
   $('div#cart-form button').click(function() {
      return are_you_sure();
   });
})
</code>

Restart the server again.

Upon adding an item to the cart, you will be prompted with the following message:

!images/customize5.png(Custom Javascript Part 2)!

h3. Notes

h4. Git

<shell>
git status
</shell>

Your new site extension files will be identified as untracked files by git. These should be added to the main repository.

Additionally, the files copied over from the +SITE_EXTENSION_DIR/public/+ directory will show as untracked files by git as well. These files can be ignored (by modifying +.gitignore) or added to the main repository.

h4. Deactivation

At this point in time, to deactivate your site extension, move the +SITE_EXTENSION_DIR+ out of the +vendor/extensions+ directory.

<shell>
mv vendor/extensions/site/ ~/
</shell>
